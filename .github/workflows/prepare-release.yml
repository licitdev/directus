name: Prepare Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (eg: 11.12.0)'
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write
  issues: write

env:
  NODE_OPTIONS: --max_old_space_size=6144

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Validate version format
        run: |
          if [[ ! "${{ github.event.inputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-.*)?$ ]]; then
            echo "‚ùå Invalid version format. Expected: x.y.z or x.y.z-prerelease"
            exit 1
          fi

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for Crowdin PR
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          CROWDIN_PRS=$(gh pr list --state open --search "New Crowdin updates" --json number,title,url --limit 5)
          if [ "$CROWDIN_PRS" != "[]" ]; then
            echo "‚ö†Ô∏è Open Crowdin PR found:"
            echo "$CROWDIN_PRS" | jq -r '.[] | "- #\(.number): \(.title) - \(.url)"'
            echo ""
            echo "Please merge Crowdin PRs before releasing or use skip-crowdin option."
            exit 1
          else
            echo "‚úÖ No open Crowdin PRs found"
          fi

      - name: Prepare
        uses: ./.github/actions/prepare

      - name: Generate release notes and update versions
        id: changeset-version
        env:
          GITHUB_TOKEN: ${{ github.token }}
          DIRECTUS_VERSION: ${{ github.event.inputs.version }}
        run: |
          echo "üîÑ Running changeset version..."

          # Capture the changeset version output
          OUTPUT=$(pnpm changeset version 2>&1)
          echo "$OUTPUT"

          # Extract release notes from the output
          # The release notes generator outputs between the divider lines
          RELEASE_NOTES=$(echo "$OUTPUT" | awk -v RS="==============================================================" 'NR==3 {print}')

          # Output release notes
          {
            echo "release_notes<<EOF"
            echo "$RELEASE_NOTES"
            echo "EOF"
          } >> $GITHUB_OUTPUT

          # Verify version was updated in main package
          PACKAGE_VERSION=$(node -p "require('./directus/package.json').version")
          if [ "$PACKAGE_VERSION" != "${{ github.event.inputs.version }}" ]; then
            echo "‚ùå Version mismatch: package.json shows $PACKAGE_VERSION, expected ${{ github.event.inputs.version }}"
            exit 1
          fi

          echo "‚úÖ Version updated successfully to ${{ github.event.inputs.version }}"

      - name: Verify changeset cleanup
        run: |
          # Count remaining changeset files (excluding config)
          CHANGESET_COUNT=$(find .changeset -name "*.md" -not -name "config.json" | wc -l)
          if [ $CHANGESET_COUNT -ne 0 ]; then
            echo "‚ùå Changesets not properly cleared. Found $CHANGESET_COUNT remaining files:"
            find .changeset -name "*.md" -not -name "config.json"
            exit 1
          fi
          echo "‚úÖ Changesets cleared successfully"

      - name: Create release PR
        id: create-pr
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          VERSION=${{ github.event.inputs.version }}
          BRANCH_NAME="release/$VERSION"
          PR_TITLE="Release $VERSION"
          RELEASE_NOTES="${{ steps.changeset-version.outputs.release_notes }}"
          RELEASE_NOTES_ESCAPED="${RELEASE_NOTES//\`/\\\`}"

          # Build the PR body content
          PR_BODY=$(cat <<EOF
          **‚ö†Ô∏è Code freeze is in effect until this release is published.**

          ### ‚úÖ Release Checklist

          - [x] Changesets processed and cleared
          - [x] Package versions updated
          - [x] Release notes generated
          - [ ] PR reviewed and approved
          - [ ] Blackbox tests passed

          ### üöÄ Release Notes

          \`\`\`md
          $RELEASE_NOTES_ESCAPED
          \`\`\`
          EOF
          )

          # Output PR body
          {
            echo "pr_body<<EOF"
            echo "$PR_BODY"
            echo "EOF"
          } >> $GITHUB_OUTPUT

          # Configure git and commit changes
          git checkout -b "$BRANCH_NAME"
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "Release $VERSION"
          git push origin "$BRANCH_NAME" --force

          # Look for existing open PR with this branch
          EXISTING_PR=$(gh pr list \
            --state open \
            --head "$BRANCH_NAME" \
            --json number \
            --jq '.[0].number' || echo "")

          if [ -n "$EXISTING_PR" ]; then
            echo "üîÑ Updating existing PR #$EXISTING_PR"
            gh pr edit $EXISTING_PR \
              --title "$PR_TITLE" \
              --body "$PR_BODY"
            echo "pr_number=$EXISTING_PR" >> $GITHUB_OUTPUT
          else
            echo "‚ú® Creating new PR"
            NEW_PR=$(gh pr create \
              --title "$PR_TITLE" \
              --body "$PR_BODY" \
              --label "Release" \
              --label "Run Blackbox" \
              --label "No Changeset" \
              --head "$BRANCH_NAME" \
              --base "main" \
              --draft=false \
              --json number \
              --jq '.number')
            echo "pr_number=$NEW_PR" >> $GITHUB_OUTPUT
          fi
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
